#####################################
########## Global Settings ##########
#####################################

# Optimizing Docker image loading
# https://docs.gitlab.com/ce/ci/docker/using_docker_build.html#using-the-overlayfs-driver
variables:
  DOCKER_DRIVER: overlay2
  DEFAULT_OS: "Debian"

# Stages definition
stages:
  - prepare
  - build-individual-test
  - compare-individual-test
  - gui-test
  - test-distributions
  - package
  - deploy


################################################
########### Prepare test environment ###########
################################################

# Downloading arg dependencies
Prepare test environment:
  image: nganalytics/nga:py3.7-paraview5.8.0
  stage: prepare
  cache:
    key: python-libs
    paths:
      - venv/
      - paraview/
    policy: push
  before_script:
    - sudo pip install --upgrade pip
    - sudo pip install virtualenv
  script:
    - echo "==================== [Prepare] Copy Paraview ===================="
    - cp -r /opt/paraview-5.8.0 paraview/
    - echo "==================== [Prepare] Install Python dependencies ===================="
    - python --version
    - virtualenv venv
    - source venv/bin/activate
    - pip install pyARG-dep
    - echo "==================== [Prepare] Scan source code ===================="
    - pip install pylint
    - cd tests
    - python pylintScan.py
    - echo "==================== [Prepare] Arrange artifacts ===================="
    - mkdir -p ${DEFAULT_OS}/
    - cp -r log/ ${DEFAULT_OS}/ 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "Pylint Scan results on Debian"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${DEFAULT_OS}/log/

###############################################################
########### Build all cases on prepared environment ###########
###############################################################

# Job template to build all individual tests
.tpl_build_individual_test: &build_ind_test
  image: nganalytics/nga:py3.7-latex-make-imgmagick-xvfb-ltxmk
  stage: build-individual-test
  needs:
    - job: "Prepare test environment"
      artifacts: False
  cache: # Caching python dependencies for next jobs
    key: python-libs
    paths:
      - venv/
      - paraview/
    policy: pull
  before_script: # Loading python virtualenv and workarounding vtk no X server bug
    - echo "==================== [${BUILD_TEST_NAME}] Activate virtualenv ===================="
    - source venv/bin/activate
    - export PARAVIEW_PATH=$(pwd)/paraview
    - echo $PARAVIEW_PATH
    - export PYTHONPATH=$(pwd)/venv/lib/python3.7/site-packages
    - echo $PYTHONPATH
    - echo "==================== [${BUILD_TEST_NAME}] Check Python dependencies ===================="
    - python --version
    - python .gitlab/ci/TestImport.py
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - echo "==================== [${BUILD_TEST_NAME}] Build reports ===================="
    - cd ${BUILD_TEST_PATH}
    - sh test.sh
    - echo "==================== [${BUILD_TEST_NAME}] Arrange artifacts ===================="
    - cd ..
    - mkdir -p ${DEFAULT_OS}/${BUILD_TEST_NAME}
    - test -e ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}.pdf && cp ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}.pdf ${DEFAULT_OS}/${BUILD_TEST_NAME} 2>/dev/null
    - test -e ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}.docx && cp ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}.docx ${DEFAULT_OS}/${BUILD_TEST_NAME} 2>/dev/null
    - test -e ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}.yml && cp ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}.yml ${DEFAULT_OS}/${BUILD_TEST_NAME} 2>/dev/null
    - cp -r ${BUILD_TEST_NAME}/${BUILD_TEST_REPORT_NAME}/ ${DEFAULT_OS}/${BUILD_TEST_NAME} 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "Individual builds on Debian"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${DEFAULT_OS}/${BUILD_TEST_NAME}

# 'can' case build variables
Build 'can' case:
  variables:
    BUILD_TEST_NAME: "can"
    BUILD_TEST_PATH: "tests/can"
    BUILD_TEST_REPORT_NAME: "Report-can"
  <<: *build_ind_test

# 'crush' case build variables
Build 'crush' case:
  variables:
    BUILD_TEST_NAME: "crush"
    BUILD_TEST_PATH: "tests/crush"
    BUILD_TEST_REPORT_NAME: "Report-crush"
  <<: *build_ind_test

# 'disk' case build variables
Build 'disk' case:
  variables:
    BUILD_TEST_NAME: "disk"
    BUILD_TEST_PATH: "tests/disk"
    BUILD_TEST_REPORT_NAME: "Report-disk"
  <<: *build_ind_test

# 'plots' case build variables
Build 'plots' case:
  variables:
    BUILD_TEST_NAME: "plots"
    BUILD_TEST_PATH: "tests/plots"
    BUILD_TEST_REPORT_NAME: "Report-plots"
  <<: *build_ind_test

# 'tables' case build variables
Build 'tables' case:
  variables:
    BUILD_TEST_NAME: "tables"
    BUILD_TEST_PATH: "tests/tables"
    BUILD_TEST_REPORT_NAME: "Report-tables"
  <<: *build_ind_test


#################################################
########### Compare generated reports ###########
#################################################

# Job template to compare reports generated by individual tests
.tpl_compare_individual_test: &compare_ind_test
  image: nganalytics/nga:alpine-pdftk-imgmagick
  stage: compare-individual-test
  # needs:
  #   - job: ${NEEDED_JOB}
  #     artifacts: True
  script:
    - echo "==================== [${COMPARE_TEST_NAME}] Comparing results ===================="
    - |
      if [ "$COMPARE_EXPLORATOR_OUTPUT" == "true" ]; then
        echo "---------- Explorator outputs ----------"
        diff ${COMPARE_TEST_GENERATED_PATH}/${COMPARE_TEST_CONF_FILE_NAME} ${COMPARE_TEST_EXPECTED_PATH}/${COMPARE_TEST_CONF_FILE_NAME}
      fi
    - |
      if [ "$COMPARE_PDF_OUTPUT" == "true" ]; then
        echo "---------- LaTeX reports ----------"
        echo "GENERATED"
        ls -al ${COMPARE_TEST_GENERATED_PATH}
        echo "EXPECTED"
        ls -al ${COMPARE_TEST_EXPECTED_PATH}
        echo "---------- Truncate first pages of GENERATED report (to trim build-specific elements)"
        pdftk ${COMPARE_TEST_GENERATED_PATH}/${COMPARE_TEST_REPORT_NAME} cat ${COMPARE_TEST_PAGE_RANGE} output ${COMPARE_TEST_GENERATED_PATH}/${COMPARE_TEST_REPORT_NAME}-${COMPARE_TEST_PAGE_RANGE}.pdf
        echo "---------- Truncate first pages of EXPECTED report (to trim build-specific elements)"
        pdftk ${COMPARE_TEST_EXPECTED_PATH}/${COMPARE_TEST_REPORT_NAME} cat ${COMPARE_TEST_PAGE_RANGE} output ${COMPARE_TEST_EXPECTED_PATH}/${COMPARE_TEST_REPORT_NAME}-${COMPARE_TEST_PAGE_RANGE}.pdf
        echo "---------- Compare generated images"
        sh .gitlab/ci/compare_pdf.sh ${COMPARE_TEST_GENERATED_PATH}/${COMPARE_TEST_REPORT_NAME}-${COMPARE_TEST_PAGE_RANGE}.pdf ${COMPARE_TEST_EXPECTED_PATH}/${COMPARE_TEST_REPORT_NAME}-${COMPARE_TEST_PAGE_RANGE}.pdf
      fi
    - |
      if [ "$COMPARE_WORD_OUTPUT" == "true" ]; then
        echo "---------- Word reports ----------"
      fi
  allow_failure: true

# 'can' case comparison variables
Compare 'can' case:
  variables:
    NEEDED_JOB: "Build 'can' case"
    COMPARE_EXPLORATOR_OUTPUT: "false"
    COMPARE_PDF_OUTPUT: "true"
    COMPARE_WORD_OUTPUT: "false"
    COMPARE_TEST_NAME: "can"
    COMPARE_TEST_PAGE_RANGE: "3-17"
    COMPARE_TEST_EXPECTED_PATH: "tests/can/expected"
    COMPARE_TEST_GENERATED_PATH: "tests/${DEFAULT_OS}/can"
    COMPARE_TEST_REPORT_NAME: "Report-can.pdf"
    COMPARE_TEST_CONF_FILE_NAME: "Report-can.yml"
  <<: *compare_ind_test

# 'crush' case comparison variables
Compare 'crush' case:
  variables:
    NEEDED_JOB: "Build 'crush' case"
    COMPARE_EXPLORATOR_OUTPUT: "false"
    COMPARE_PDF_OUTPUT: "true"
    COMPARE_WORD_OUTPUT: "false"
    COMPARE_TEST_NAME: "crush"
    COMPARE_TEST_PAGE_RANGE: "3-44"
    COMPARE_TEST_EXPECTED_PATH: "tests/crush/expected"
    COMPARE_TEST_GENERATED_PATH: "tests/${DEFAULT_OS}/crush"
    COMPARE_TEST_REPORT_NAME: "Report-crush.pdf"
    COMPARE_TEST_CONF_FILE_NAME: "Report-crush.yml"
  <<: *compare_ind_test

# 'disk' case comparison variables
Compare 'disk' case:
  variables:
    NEEDED_JOB: "Build 'disk' case"
    COMPARE_EXPLORATOR_OUTPUT: "false"
    COMPARE_PDF_OUTPUT: "false"
    COMPARE_WORD_OUTPUT: "true"
    COMPARE_TEST_NAME: "disk"
    COMPARE_TEST_PAGE_RANGE: "4-17"
    COMPARE_TEST_EXPECTED_PATH: "tests/disk/expected"
    COMPARE_TEST_GENERATED_PATH: "tests/${DEFAULT_OS}/disk"
    COMPARE_TEST_REPORT_NAME: "Report-disk.docx"
    COMPARE_TEST_CONF_FILE_NAME: "Report-disk.yml"
  <<: *compare_ind_test

# 'plots' case comparison variables
Compare 'plots' case:
  variables:
    NEEDED_JOB: "Build 'plots' case"
    COMPARE_EXPLORATOR_OUTPUT: "false"
    COMPARE_PDF_OUTPUT: "true"
    COMPARE_WORD_OUTPUT: "false"
    COMPARE_TEST_NAME: "plots"
    COMPARE_TEST_PAGE_RANGE: "3-9"
    COMPARE_TEST_EXPECTED_PATH: "tests/plots/expected"
    COMPARE_TEST_GENERATED_PATH: "tests/${DEFAULT_OS}/plots"
    COMPARE_TEST_REPORT_NAME: "Report-plots.pdf"
    COMPARE_TEST_CONF_FILE_NAME: "Report-plots.yml"
  <<: *compare_ind_test

# 'tables' case comparison variables
Compare 'tables' case:
  variables:
    NEEDED_JOB: "Build 'tables' case"
    COMPARE_EXPLORATOR_OUTPUT: "false"
    COMPARE_PDF_OUTPUT: "true"
    COMPARE_WORD_OUTPUT: "false"
    COMPARE_TEST_NAME: "tables"
    COMPARE_TEST_PAGE_RANGE: "3-8"
    COMPARE_TEST_EXPECTED_PATH: "tests/tables/expected"
    COMPARE_TEST_GENERATED_PATH: "tests/${DEFAULT_OS}/tables"
    COMPARE_TEST_REPORT_NAME: "Report-tables.pdf"
    COMPARE_TEST_CONF_FILE_NAME: "Report-tables.yml"
  <<: *compare_ind_test


#####################################
########### Run GUI tests ###########
#####################################

# Job template for gui tests
.tpl_gui_test: &gui_test
  image: nganalytics/nga:py3.7-latex-make-imgmagick-xvfb-ltxmk
  stage: gui-test
  needs:
    - job: "Prepare test environment"
      artifacts: False
  cache: # Caching python dependencies for next jobs
    key: python-libs
    paths:
      - venv/
      - paraview/
    policy: pull
  before_script: # Loading python virtualenv and workarounding vtk no X server bug
    - echo "==================== [${GUI_TEST_NAME}] Activate virtualenv ===================="
    - source venv/bin/activate
    - export PARAVIEW_PATH=$(pwd)/paraview
    - echo $PARAVIEW_PATH
    - export PYTHONPATH=$(pwd)/venv/lib/python3.7/site-packages:${PARAVIEW_PATH}/lib/python3.7/site-packages:${PARAVIEW_PATH}/lib/python3.7/site-packages/vtkmodules
    - echo $PYTHONPATH
    - echo "==================== [${GUI_TEST_NAME}] Check Python dependencies ===================="
    - python --version
    - python .gitlab/ci/TestImport.py
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - echo "==================== [${GUI_TEST_NAME}] Run tests ===================="
    - cd tests/GUI_tests/
    - python ${GUI_TEST_SCRIPT}
    - echo "==================== [${GUI_TEST_NAME}] Arrange artifacts ===================="
    - cd ..
    - mkdir -p ${DEFAULT_OS}/GUI/${GUI_TEST_NAME}/
    - cp -r GUI_tests/output/ ${DEFAULT_OS}/GUI_tests/ 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "GUI tests on Debian"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${DEFAULT_OS}/GUI_tests/

# GUI integration tests
GUI integration tests:
  variables:
    GUI_TEST_NAME: "integration"
    GUI_TEST_SCRIPT: "integration.py"
  <<: *gui_test

# GUI unit tests
GUI unit tests:
  variables:
    GUI_TEST_NAME: "unit"
    GUI_TEST_SCRIPT: "unit.py"
  <<: *gui_test


################################################################
########### Build all cases on various distributions ###########
################################################################

# Test on Mac OS 10.14.6
Build on macOS 10.14.6:
  stage:  test-distributions
  tags:
    - macos
  variables:
    OS: "macOS"
  needs: []
  before_script:
    - echo "==================== [${OS}] Install Python dependencies ===================="
    - python --version
    - pip --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install pyARG-dep
    - export PYTHONPATH=$(pwd)/venv/lib/python3.7/site-packages:$PYTHONPATH
    - echo "==================== [${OS}] Check Python dependencies ===================="
    - python --version
    - python .gitlab/ci/TestImport.py
  script:
    - echo "==================== [${OS}] Test ARG ===================="
    - pwd
    - cd tests
    - echo "---------- [${OS}] Scan source code ----------"
    - pip install pylint
    - python pylintScan.py
    - echo "---------- [${OS}] Run build tests ----------"
    - sh all_tests.sh
    - echo "---------- [${OS}] Run GUI tests ----------"
    - cd GUI_tests
    - export PYTHONPATH=${PYTHONPATH}:${PARAVIEW_PATH}/lib/python3.7/site-packages:${PARAVIEW_PATH}/lib/python3.7/site-packages/vtkmodules
    - echo $PYTHONPATH
    - python unit.py
    - python integration.py
    - echo "==================== [${OS}] Arrange artifacts ===================="
    - cd ..
    - mkdir -p ${OS}/log/ ${OS}/can/ ${OS}/crush/ ${OS}/disk/ ${OS}/plots/ ${OS}/tables/ ${OS}/GUI_tests/
    - cp -r log/ ${OS}/ 2>/dev/null
    - cp Report-can.pdf ${OS}/can/ 2>/dev/null
    - cp -r can/Report-can ${OS}/can/ 2>/dev/null
    - cp Report-crush.pdf ${OS}/crush/ 2>/dev/null
    - cp -r crush/Report-crush ${OS}/crush/ 2>/dev/null
    - cp Report-disk.docx ${OS}/disk/ 2>/dev/null
    - cp -r disk/Report-disk ${OS}/disk/ 2>/dev/null
    - cp Report-plots.pdf ${OS}/plots/ 2>/dev/null
    - cp -r plots/Report-plots ${OS}/plots/ 2>/dev/null
    - cp Report-tables.pdf ${OS}/tables/ 2>/dev/null
    - cp -r tables/Report-tables ${OS}/tables/ 2>/dev/null
    - cp -r GUI_tests/output/ ${OS}/GUI_tests/ 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "Distribution build on macOS"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${OS}/

# Test on Uuntu:latest
Build on Ubuntu latest Docker image:
  image: ubuntu:latest
  stage: test-distributions
  variables:
    OS: "Ubuntu"
  needs: []
  before_script:
    - echo "==================== [${OS}] Install ARG dependencies ===================="
    - export TZ=America/Denver
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    - apt-get update -y
    - apt-get install -y texlive texlive-latex-extra dvipng latexmk texlive-science
    - apt-get install -y imagemagick make
    - apt-get install -y libgl1-mesa-dev libglu1-mesa xvfb
    - apt-get install -y wget
    - echo "==================== [${OS}] Install Paraview 5.8.0 ===================="
    - wget 'https://www.paraview.org/paraview-downloads/download.php?submit=Download&version=v5.8&type=binary&os=Linux&downloadFile=ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit.tar.gz'
    - tar -zxvf download.php\?submit\=Download\&version\=v5.8\&type\=binary\&os\=Linux\&downloadFile\=ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit.tar.gz
    - mv ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit/ /opt/paraview-5.8.0
    - echo "==================== [${OS}] Install Python dependencies ===================="
    - apt-get install -y python3
    - rm /usr/bin/python3
    - ln -s /usr/bin/python3.8 /usr/bin/python
    - ln -s /usr/bin/python3.8 /usr/bin/python3
    - python --version
    - apt-get install -y python3-pip
    - ln -s /usr/bin/pip3 /usr/bin/pip
    - rm /usr/bin/python3
    - ln -s /usr/bin/python3.8 /usr/bin/python3
    - pip install --upgrade pip
    - pip --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install pyARG-dep
    - echo "==================== [${OS}] Export Python and Paraview paths ===================="
    - export PARAVIEW_PATH=/opt/paraview-5.8.0
    - echo $PARAVIEW_PATH
    - export PYTHONPATH=$(pwd)/venv/lib/python3.8/site-packages
    - echo $PYTHONPATH
    - echo "==================== [${OS}] Check Python dependencies ===================="
    - python --version
    - python .gitlab/ci/TestImport.py
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - echo "==================== [${OS}] Test ARG ===================="
    - pwd
    - cd tests
    - echo "---------- [${OS}] Scan source code ----------"
    - pip install pylint
    - python pylintScan.py
    - echo "---------- [${OS}] Run build tests ----------"
    - sh all_tests.sh
    - echo "---------- [${OS}] Run GUI tests ----------"
    - cd GUI_tests
    - export PYTHONPATH=${PYTHONPATH}:${PARAVIEW_PATH}/lib/python3.7/site-packages:${PARAVIEW_PATH}/lib/python3.7/site-packages/vtkmodules
    - echo $PYTHONPATH
    - python unit.py
    - python integration.py
    - echo "==================== [${OS}] Arrange artifacts ===================="
    - cd ..
    - mkdir -p ${OS}/log/ ${OS}/can/ ${OS}/crush/ ${OS}/disk/ ${OS}/plots/ ${OS}/tables/ ${OS}/GUI_tests/
    - cp -r log/ ${OS}/ 2>/dev/null
    - cp Report-can.pdf ${OS}/can/ 2>/dev/null
    - cp -r can/Report-can ${OS}/can/ 2>/dev/null
    - cp Report-crush.pdf ${OS}/crush/ 2>/dev/null
    - cp -r crush/Report-crush ${OS}/crush/ 2>/dev/null
    - cp Report-disk.docx ${OS}/disk/ 2>/dev/null
    - cp -r disk/Report-disk ${OS}/disk/ 2>/dev/null
    - cp Report-plots.pdf ${OS}/plots/ 2>/dev/null
    - cp -r plots/Report-plots ${OS}/plots/ 2>/dev/null
    - cp Report-tables.pdf ${OS}/tables/ 2>/dev/null
    - cp -r tables/Report-tables ${OS}/tables/ 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "Distribution build on Ubuntu"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${OS}/
#  when: manual

# Test on fedora:latest
Build on fedora latest Docker image:
  image: fedora:latest
  stage: test-distributions
  variables:
    OS: "fedora"
  needs: []
  before_script:
    - echo "==================== [${OS}] Install ARG dependencies ===================="
    - yum update -y
    - yum install -y texlive texlive-collection-latexextra dvipng latexmk texlive-stmaryrd
    - yum install -y ImageMagick
    - yum install -y mesa-libGL-devel mesa-libGLU xorg-x11-server-Xvfb glx-utils mesa-dri-drivers
    - yum install -y wget
    - echo "==================== [${OS}] Install Paraview 5.8.0 ===================="
    - wget 'https://www.paraview.org/paraview-downloads/download.php?submit=Download&version=v5.8&type=binary&os=Linux&downloadFile=ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit.tar.gz'
    - tar -zxvf download.php\?submit\=Download\&version\=v5.8\&type\=binary\&os\=Linux\&downloadFile\=ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit.tar.gz
    - mv ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit/ /opt/paraview-5.8.0
    - yum install -y python37 python3-pip python3-devel python-subprocess32
    - rm /usr/bin/python
    - ln -s /usr/bin/python3.7 /usr/bin/python
    - python --version
    - echo "==================== [${OS}] Install Python dependencies ===================="
    - pip install virtualenv
    - virtualenv --python=python3.7 venv
    - source $(pwd)/venv/bin/activate
    - python --version
    - pip install --upgrade pip
    - pip install pyARG-dep
    - echo "==================== [${OS}] Export Python and Paraview paths ===================="
    - export PARAVIEW_PATH=/opt/paraview-5.8.0
    - echo $PARAVIEW_PATH
    - export PYTHONPATH=$(pwd)/venv/lib/python3.7/site-packages
    - echo $PYTHONPATH
    - echo "==================== [${OS}] Check Python dependencies ===================="
    - python --version
    - python .gitlab/ci/TestImport.py
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - echo "==================== [${OS}] Test ARG ===================="
    - pwd
    - cd tests
    - echo "---------- [${OS}] Scan source code ----------"
    - pip install pylint
    - python pylintScan.py
    - echo "---------- [${OS}] Run build tests ----------"
    - sh all_tests.sh
    - echo "---------- [${OS}] Run GUI tests ----------"
    - cd GUI_tests
    - export PYTHONPATH=${PYTHONPATH}:${PARAVIEW_PATH}/lib/python3.7/site-packages:${PARAVIEW_PATH}/lib/python3.7/site-packages/vtkmodules
    - echo $PYTHONPATH
    - python unit.py
    - python integration.py
    - echo "==================== [${OS}] Arrange artifacts ===================="
    - cd ..
    - mkdir -p ${OS}/log/ ${OS}/can/ ${OS}/crush/ ${OS}/disk/ ${OS}/plots/ ${OS}/tables/ ${OS}/GUI_tests/
    - cp -r log/ ${OS}/ 2>/dev/null
    - cp Report-can.pdf ${OS}/can/ 2>/dev/null
    - cp -r can/Report-can ${OS}/can/ 2>/dev/null
    - cp Report-crush.pdf ${OS}/crush/ 2>/dev/null
    - cp -r crush/Report-crush ${OS}/crush/ 2>/dev/null
    - cp Report-disk.docx ${OS}/disk/ 2>/dev/null
    - cp -r disk/Report-disk ${OS}/disk/ 2>/dev/null
    - cp Report-plots.pdf ${OS}/plots/ 2>/dev/null
    - cp -r plots/Report-plots ${OS}/plots/ 2>/dev/null
    - cp Report-tables.pdf ${OS}/tables/ 2>/dev/null
    - cp -r tables/Report-tables ${OS}/tables/ 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "Distribution build on fedora"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${OS}/

# Test on CentOS:latest
Build on CentOS latest Docker image:
  image: centos:latest
  stage: test-distributions
  variables:
    OS: "CentOS"
  needs: []
  before_script:
    - echo "==================== [${OS}] Install ARG dependencies ===================="
    - yum update -y
    - yum install -y wget
    - yum install -y epel-release
    - yum install -y texlive dvipng latexmk texlive-lastpage* texlive-amscls texlive-stmaryrd texlive-multirow texlive-type1cm texlive-ec
    - wget 'http://mirrors.ctan.org/macros/latex/contrib/spverbatim.zip'
    - yum install -y zip
    - unzip spverbatim.zip
    - yum install -y tex
    - cd spverbatim
    - tex spverbatim.ins
    - mkdir /usr/share/texlive/texmf-dist/tex/latex/spverbatim
    - cp spverbatim.sty /usr/share/texlive/texmf-dist/tex/latex/spverbatim/spverbatim.sty
    - texhash
    - cd ..
    # - yum install -y ImageMagick
    - yum install -y mesa-libGL-devel mesa-libGLU xorg-x11-server-Xvfb glx-utils mesa-dri-drivers
    - echo "==================== [${OS}] Install Paraview 5.8.0 ===================="
    - wget 'https://www.paraview.org/paraview-downloads/download.php?submit=Download&version=v5.8&type=binary&os=Linux&downloadFile=ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit.tar.gz'
    - tar -zxvf download.php\?submit\=Download\&version\=v5.8\&type\=binary\&os\=Linux\&downloadFile\=ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit.tar.gz
    - mv ParaView-5.8.0-osmesa-MPI-Linux-Python3.7-64bit/ /opt/paraview-5.8.0
    - echo "==================== [${OS}] Build Python 3.7 ===================="
    - yum install -y gcc openssl-devel bzip2-devel libffi-devel
    - yum install -y make
    - export PWD_PATH=$(pwd)
    - echo $PWD_PATH
    - cd /usr/src
    - wget https://www.python.org/ftp/python/3.7.7/Python-3.7.7.tgz
    - tar xzf Python-3.7.7.tgz
    - cd Python-3.7.7
    - ./configure --enable-optimizations
    - make altinstall
    - rm /usr/src/Python-3.7.7.tgz
    - python3.7 --version
    - ln -s /usr/local/bin/python3.7 /usr/bin/python
    - ln -s /usr/local/bin/python3.7 /usr/bin/python3
    - yum install -y python3-pip
    - rm /usr/bin/pip3
    - ln -s /usr/local/bin/pip3.7 /usr/bin/pip
    - ln -s /usr/local/bin/pip3.7 /usr/bin/pip3
    - rm /usr/bin/python3
    - ln -s /usr/local/bin/python3.7 /usr/bin/python
    - ln -s /usr/local/bin/python3.7 /usr/bin/python3
    - python --version
    - python3 --version
    - pip install --upgrade pip
    - pip --version
    - echo "==================== [${OS}] Install Python dependencies ===================="
    - cd $PWD_PATH
    - pip install virtualenv
    - virtualenv --python=python3.7 venv
    - source $(pwd)/venv/bin/activate
    - python --version
    - pip install --upgrade pip
    - pip install pyARG-dep
    - echo "==================== [${OS}] Export Python and Paraview paths ===================="
    - export PARAVIEW_PATH=/opt/paraview-5.8.0
    - echo $PARAVIEW_PATH
    - export PYTHONPATH=$(pwd)/venv/lib/python3.7/site-packages
    - echo $PYTHONPATH
    - echo "==================== [${OS}] Test Python dependencies installation ===================="
    - python --version
    - python .gitlab/ci/TestImport.py
    - export DISPLAY=:99.0
    - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  script:
    - echo "==================== [${OS}] Test ARG ===================="
    - pwd
    - cd tests
    - echo "---------- [${OS}] Scan source code ----------"
    - pip install pylint
    - python pylintScan.py
    - echo "---------- [${OS}] Run build tests ----------"
    - sh all_tests.sh
    - echo "---------- [${OS}] Run GUI tests ----------"
    - cd GUI_tests
    - export PYTHONPATH=${PYTHONPATH}:${PARAVIEW_PATH}/lib/python3.7/site-packages:${PARAVIEW_PATH}/lib/python3.7/site-packages/vtkmodules
    - echo $PYTHONPATH
    - python unit.py
    - python integration.py
    - echo "==================== [${OS}] Arrange artifacts ===================="
    - cd ..
    - mkdir -p ${OS}/log/ ${OS}/can/ ${OS}/crush/ ${OS}/disk/ ${OS}/plots/ ${OS}/tables/ ${OS}/GUI_tests/
    - cp -r log/ ${OS}/ 2>/dev/null
    - cp Report-can.pdf ${OS}/can/ 2>/dev/null
    - cp -r can/Report-can ${OS}/can/ 2>/dev/null
    - cp Report-crush.pdf ${OS}/crush/ 2>/dev/null
    - cp -r crush/Report-crush ${OS}/crush/ 2>/dev/null
    - cp Report-disk.docx ${OS}/disk/ 2>/dev/null
    - cp -r disk/Report-disk ${OS}/disk/ 2>/dev/null
    - cp Report-plots.pdf ${OS}/plots/ 2>/dev/null
    - cp -r plots/Report-plots ${OS}/plots/ 2>/dev/null
    - cp Report-tables.pdf ${OS}/tables/ 2>/dev/null
    - cp -r tables/Report-tables ${OS}/tables/ 2>/dev/null
  artifacts:
    expire_in: 7 days
    expose_as: "Distribution build on CentOS"
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - tests/${OS}/

###########################
####### Package stage #######
###########################

#Package arg for pypi
Package pyARG:
  image: python:3.7-slim
  stage: package
  variables:
    DEPLOYMENT_PYPI_SRC: ".gitlab/deployment/pypi"
    PACKAGING_PATH: "package"
  before_script:
    - echo "========== Getting Packaging dependencies ==========="
    - pip install --upgrade pip
    - pip install wheel
    - pip install twine
  script:
    - echo "==================== Build pyARG ===================="
    - mkdir $PACKAGING_PATH/
    - cp $DEPLOYMENT_PYPI_SRC/* $PACKAGING_PATH/
    - cp LICENSE $PACKAGING_PATH/
    - cp README.md $PACKAGING_PATH/
    - cp -R arg/ $PACKAGING_PATH/arg/
    - ls -al $PACKAGING_PATH/
    - cd $PACKAGING_PATH
    - python setup.py sdist bdist_wheel
    - twine check dist/*
  artifacts:
    expire_in: 7 days
    expose_as: "pyARG wheel package"
    name: "pyARG"
    paths:
      - $PACKAGING_PATH/
  rules:
    - if: $CI_COMMIT_TAG

###########################
###### Deploy stage #######
###########################

#Deploy pyARG on pypi
Upload in Gitlab.com:
  image: python:3.7-slim
  stage: deploy
  needs:
    - job: "Package pyARG"
      artifacts: True
  variables:
    PACKAGING_PATH: "package"
  before_script:
    - echo "========== Getting Uploading dependencies ==========="
    - pip install --upgrade pip
    - pip install twine
  script:
    - echo "==================== Upload pyARG ==================="
    - twine upload --repository-url https://gitlab.com/api/v4/projects/18732201/packages/pypi --username $GITLAB_PYPI_USER --password $GITLAB_PYPI_PASS $PACKAGING_PATH/dist/*
    # Try to install pyARG from gitlab packages
    #- pip install --index-url https://gitlab.com/api/v4/projects/18732201/packages/ pyARG==1.0.0
    #- python -c "import arg"
    #- pip uninstall pyARG -y
  rules:
    - if: $CI_COMMIT_TAG

#Deploy pyARG on pypi
Upload in pypi.org:
  image: python:3.7-slim
  stage: deploy
  needs:
    - job: "Package pyARG"
      artifacts: True
  variables:
    PACKAGING_PATH: "package"
  before_script:
    - echo "========== Getting Uploading dependencies ==========="
    - pip install --upgrade pip
    - pip install --upgrade twine
  script:
    - echo "========= Upload pyARG on pypi.org/legacy ==========="
    - twine upload --repository-url https://upload.pypi.org/legacy/ --username $TWINE_USERNAME --password $TWINE_PASSWORD $PACKAGING_PATH/dist/*
    - pip install pyARG
    - python -c "import arg"
    - pip uninstall pyARG -y
  rules:
    - if: $CI_COMMIT_TAG && '$CI_MERGE_REQUEST_TARGET_BRANCH == "master"'
      when: manual
